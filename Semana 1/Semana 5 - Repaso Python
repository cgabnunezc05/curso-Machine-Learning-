{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPN1jLYIE95qbsDENGBXfnL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3qW49Ak3Xg_I","executionInfo":{"status":"ok","timestamp":1679389549474,"user_tz":-60,"elapsed":8,"user":{"displayName":"Cynthia G. Núñez","userId":"17128155108396838371"}},"outputId":"e1655df2-7de6-469e-80d4-02caaa885dd0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hola\n","6\n"]}],"source":["#VARIABLES\n","#tipos primitivos\n","#crear variables\n","nombre_variable = \"Hola\"\n","numero = 6\n","#Google Colab solo muestra la última variable. Si queremos ver todo, usamos print.\n","#usar variables\n","print(nombre_variable)\n","print(numero)\n","#recomendacion: las variables nunca comienzan por numero, no contienen espacios y no se usan variables reservadas, porque estariamos sustituyendo\n","#las variables ya creadas de python. Podemos entonces crear variables en castellano y nos cuidamos de eso."]},{"cell_type":"code","source":["#ESTRUCTURAS DE DATOS\n","#listas = susesion de valores separados por comas, entre corchetes e indexados por la posicion. significa que para consultar la posicion del valor vamos desde 0 en adelante.\n","lista = [1,2,3,4,5,4]\n","lista[4]\n","#tuplas=sirven para crear lista de datos inmutables. son valores separados por comas, entre parentesis.\n","#tupla = (1,2,3,4,5)\n","#conjuntos = susesiones de valores separados por comas, que no pueden tener elementos repetidos, entre llaves. sirve para eliminar repetidos en una lista.\n","#set(lista) me va a arrojar {1,2,3,4,5} (eliminó el 4 repetido)\n","set (lista)\n","#int elimina los decimales (no redondea)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DwmdJTZyYTAq","executionInfo":{"status":"ok","timestamp":1679389386797,"user_tz":-60,"elapsed":14,"user":{"displayName":"Cynthia G. Núñez","userId":"17128155108396838371"}},"outputId":"e8be6b5f-af26-462f-b268-9e0b75d996a8"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1, 2, 3, 4, 5}"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#type=consultar tipo de dato\n","#len=consultar longitud de la palabra\n","\n","#OPERADORES ARITMETICOS\n","6+5\n","6-4\n","6*5\n","2**3 #potencia\n","6/2\n","6//2 #division sin decimales (me devuelve un entero)\n","6%3 #me arroja el residuo\n","\n","#OPERADOR DE ASIGNACION\n","#el igual sirve para crear variables.\n","x=6\n","\n","#OPERADORES DE COMPARACION\n","6>5\n","6==5\n","print(\"Comparacion de 6==´5´:\", 6==\"5\")\n","6<5\n","6 != 5 #distinto (!= pegado)\n","\n","if 6>5: #siempre los dos puntos\n","  print(\"Hola\")\n","else: #siempre los dos puntos\n","  print(\"No hola\") #importante el espacio o indentation, para indicar que esta dentro del else\n","\n","#otro ejemplo\n","nuestra_velocidad=119\n","max_velocidad=120\n","if nuestra_velocidad < max_velocidad:\n","  print(\"Todo Ok\")\n","elif nuestra_velocidad == max_velocidad: #elif se usa cuando hay mas de dos caminos\n","  print(\"Deja de acelerar\")\n","else:\n","  print(\"multita\")\n","\n","nuestra_velocidad=120\n","max_velocidad=120\n","if nuestra_velocidad < max_velocidad:\n","  print(\"Todo Ok\")\n","elif nuestra_velocidad == max_velocidad:\n","  print(\"Deja de acelerar\")\n","else:\n","  print(\"multita\")\n","\n","nuestra_velocidad=125\n","max_velocidad=120\n","if nuestra_velocidad < max_velocidad:\n","  print(\"Todo Ok\")\n","elif nuestra_velocidad == max_velocidad:\n","  print(\"Deja de acelerar\")\n","else:\n","  print(\"Multita\")\n","\n","nuestra_velocidad=119\n","max_velocidad=120\n","if nuestra_velocidad < max_velocidad:\n","  print(\"Todo Ok\")\n","  if nuestra_velocidad == 119: #condicional anidada\n","    print(\"Mi velocidad fav\")\n","elif nuestra_velocidad == max_velocidad:\n","  print(\"Deja de acelerar\")\n","else:\n","  print(\"Multita\")\n","\n","nuestra_velocidad=118\n","max_velocidad=120\n","if nuestra_velocidad < max_velocidad:\n","  print(\"Todo Ok\")\n","  if nuestra_velocidad == 119: #condicional anidada\n","    print(\"Mi velocidad fav\")\n","elif nuestra_velocidad == max_velocidad:\n","  print(\"Deja de acelerar\")\n","else:\n","  print(\"Multita\")\n","\n","lista = [2,3,4,5,6]\n","6 in lista\n","\n","#OPERADORES LOGICOS"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V-U8CH46Y0Ns","executionInfo":{"status":"ok","timestamp":1679396805864,"user_tz":-60,"elapsed":197,"user":{"displayName":"Cynthia G. Núñez","userId":"17128155108396838371"}},"outputId":"16dd052c-3c2d-4d4d-e625-a1c044036a71"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Comparacion de 6==´5´: False\n","Hola\n","Todo Ok\n","Deja de acelerar\n","Multita\n","Todo Ok\n","Mi velocidad fav\n","Todo Ok\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["#BUCLE FACIL CON FOR\n","#asigna valor a la primera variable\n","#sabe seguir\n","#sabe parar (en el ultimo valor para no darte un index error)\n","lista = [1,2,3,4]\n","for numero in lista: #numero es un nombre random que asignamos a la variable iteradoa (no puede estar definida antes sino eliminariamos ese valor y le asignariamos el nuevo), no hay que crearla porque for la crea por nosotros.\n","  print(numero)\n","\n","print()\n","\n","#BUCLE DIFICIL CON WHILE\n","#paso 1. asignar a la variable iteradora el valor de la posicion inicial\n","#paso 2. indicarle que vaya a la siguiente posicion en la lista\n","#paso 3. indicarle cuando parar\n","posicion=0\n","while posicion < len(lista): #< 4: #4 se refiere a la cantidad de elementos. si agregamos otro valor a la lista, no funcionara, asi que le ponemos la longitud de la lista.\n","  numero = lista[posicion]\n","  posicion = posicion + 1\n","  print(numero)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-4uDjd4lLnKS","executionInfo":{"status":"ok","timestamp":1679403201532,"user_tz":-60,"elapsed":382,"user":{"displayName":"Cynthia G. Núñez","userId":"17128155108396838371"}},"outputId":"88cc706e-bea4-40b9-81c3-c34290fdcd88"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","\n","1\n","2\n","3\n","4\n"]}]}]}